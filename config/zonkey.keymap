#include <physical_layouts.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define ZMK_POINTING_DEFAULT_SCRL_VAL 100
#define DFb 0
#define JIS 1
#define BT 4
#define MOUSE 6
#define JP_DQUOTE       AT                // "
#define JP_AMPERSAND    CARET             // &
#define JP_QUOTE        AMPERSAND         // '
#define JP_EQUAL        UNDER             // =
#define JP_CARET        EQUAL             // ^
#define JP_YEN          0x89              // ¥
#define JP_PLUS         COLON             // +
#define JP_TILDE        PLUS              // ~
#define JP_PIPE         LS(0x89)          // |
#define JP_AT           LEFT_BRACKET      // @
#define JP_COLON        SINGLE_QUOTE      // :
#define JP_ASTERISK     DOUBLE_QUOTES     // *
#define JP_BACKQUOTE    LEFT_BRACE        // `
#define JP_UNDERSCORE   LS(0x87)          // _
#define JP_LBRACKET     RIGHT_BRACKET     // [
#define JP_RBRACKET     BACKSLASH         // ]
#define JP_LPAREN       ASTERISK          // (
#define JP_RPAREN       LEFT_PARENTHESIS  // )
#define JP_LBRACE       RIGHT_BRACE       // {
#define JP_RBRACE       PIPE              // }
#define JP_KANA         LANGUAGE_1        // かな
#define JP_EISU         LANGUAGE_2        // 英数
#define JP_HANZEN       GRAVE             // 半角/全角
#define JP_BSLH  INT1         // (backslash)

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <12 13>;
        };

        esc {
            bindings = <&kp ESC>;
            key-positions = <0 1>;
        };

        ime {
            bindings = <&kp LC(SPACE)>;
            key-positions = <18 19>;
        };

        comma {
            bindings = <&kp COMMA>;
            key-positions = <30 31>;
        };

        period {
            bindings = <&kp PERIOD>;
            key-positions = <31 32>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 1 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        mo2: mo2 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp N2>, <&kp AT>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mo6: mo6 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp N6>, <&kp CARET>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mo7: mo7 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp N7>, <&kp AMPS>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mo8: mo8 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp N8>, <&kp ASTRK>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mo9: mo9 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp N9>, <&kp LPAR>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mo0: mo0 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp N0>, <&kp LS(N9)>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        moA: moA {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp MINUS>, <&kp UNDERSCORE>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        moB: moB {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp EQUAL>, <&kp PLUS>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        moC: moC {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp INT3>, <&kp JP_PIPE>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        moD: moD {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LBKT>, <&kp LBRC>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        moE: moE {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RBKT>, <&kp RBRC>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        moF: moF {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp SEMI>, <&kp KP_PLUS>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        moG: moG {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp APOSTROPHE>, <&kp DQT>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        moH: moH {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BACKSLASH>, <&kp TILDE2>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        moI: moI {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp JP_BSLH>, <&kp JP_UNDERSCORE>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        scroll_up_down: behavior_sensor_rotate_mouse_wheel_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_UP>, <&msc SCRL_DOWN>;

            tap-ms = <20>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q           &kp W         &kp E     &kp R  &kp T                                                  &kp Y          &kp U        &kp I      &kp O  &kp P
&kp A           &kp S         &kp D     &kp F  &kp G  &kp LS(LG(NUMBER_3))    &mt LEFT_ALT LA(SPACE)  &kp H          &kp J        &kp K      &kp L  &kp SEMICOLON
&kp LEFT_SHIFT  &kp Z         &kp X     &kp C  &kp V  &kp B                   &lt 5 LG(SPACE)         &kp N          &kp M        &mkp LCLK  &mo 5  &kp SLASH
&kp LCTRL       &kp LEFT_ALT  &kp LCMD  &mo 1  &mo 3  &lt 4 SPACE                                     &kp BACKSPACE  &lt 2 ENTER                                   &kp LEFT_SHIFT
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        Mouse {
            bindings = <
&none   &none      &none         &none     &none                    &kp LG(NUMBER_1)      &kp LA(LG(LEFT_ARROW))  &none  &kp LA(LG(RIGHT_ARROW))  &kp LG(NUMBER_9)
&none   &kp LCTRL  &kp LEFT_ALT  &kp LCMD  &none   &none     &none  &none                 &mkp LCLK               &none  &mkp RCLK                &none
&trans  &none      &none         &none     &none   &none     &none  &kp LS(LG(NUMBER_3))  &none                   &none  &none                    &none
&trans  &trans     &trans        &trans    &trans  &trans           &kp LG(LEFT_BRACKET)  &kp LG(RIGHT_BRACKET)                                                     &none
            >;
        };

        Arrow {
            bindings = <
&kp NUMBER_1       &kp NUMBER_2              &kp NUMBER_3       &kp NUMBER_4               &kp NUMBER_5                             &kp NUMBER_6       &kp NUMBER_7       &kp NUMBER_8   &kp NUMBER_9     &kp NUMBER_0
&kp C_VOLUME_DOWN  &kp LC(LG(LEFT_BRACKET))  &kp LC(LG(SPACE))  &kp LC(LG(RIGHT_BRACKET))  &kp C_VOLUME_UP  &none            &none  &kp LEFT_ARROW     &kp DOWN_ARROW     &kp UP_ARROW   &kp RIGHT_ARROW  &none
&trans             &none                     &none              &kp LG(NUMBER_0)           &kp LG(MINUS)    &kp LG(EQUAL)    &none  &kp LA(LC(SPACE))  &kp LA(LC(SPACE))  &kp LS(LA(J))  &none            &none
&trans             &trans                    &trans             &trans                     &trans           &trans                  &trans             &trans                                                           &trans
            >;
        };

        Symbol {
            bindings = <
&kp LS(TILDE)  &kp LS(DLLR)   &kp LS(POUND)  &kp LS(AT)    &kp LS(EXCL)                        &kp LS(LPAR)  &kp LS(RPAR)  &kp BSLH      &kp SLASH      &kp LS(SEMICOLON)
&kp LS(PRCNT)  &kp LS(CARET)  &kp LS(AMPS)   &kp LS(STAR)  &kp LS(UNDER)  &kp GRAVE    &trans  &kp LBKT      &kp RBKT      &kp LS(PIPE)  &kp LS(SLASH)  &kp SEMICOLON
&trans         &kp LS(DQT)    &kp SQT        &kp EQUAL     &kp LS(PLUS)   &kp MINUS    &none   &kp LS(LBRC)  &kp LS(RBRC)  &kp LS(LT)    &kp LS(GT)     &none
&trans         &trans         &trans         &trans        &trans         &trans               &kp LA(RET)   &kp LS(RET)                                                   &trans
            >;
        };

        Display {
            bindings = <
&trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans                          &trans
            >;
        };

        Function {
            bindings = <
&trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans                          &trans
            >;
        };

        Bluetooth {
            bindings = <
&trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans                          &trans
            >;
        };
    };
};
